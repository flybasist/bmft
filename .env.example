# ============================================================================
# BMFT Bot Configuration (.env)
# ============================================================================
# Инструкция: cp .env.example .env
# Заполни TELEGRAM_BOT_TOKEN и раскомментируй нужный сценарий
# ============================================================================

# ============================================================================
# ОБЯЗАТЕЛЬНАЯ ПЕРЕМЕННАЯ
# ============================================================================

# Telegram Bot Token (получи у @BotFather)
TELEGRAM_BOT_TOKEN=YOUR_BOT_TOKEN_HERE

# ============================================================================
# СЦЕНАРИИ РАЗВЁРТЫВАНИЯ (раскомментируй один)
# ============================================================================

# ────────────────────────────────────────────────────────────────────────────
# 🐳 СЦЕНАРИЙ 1: БД и Бот в Docker (рекомендуется для production)
# ────────────────────────────────────────────────────────────────────────────
# Команды:
#   docker-compose -f docker-compose.env.yaml up -d
#   docker-compose -f docker-compose.bot.yaml up -d
# Проверка:
#   docker logs -f bmft_bot
# ────────────────────────────────────────────────────────────────────────────
POSTGRES_DSN=postgres://bmft:bmft@postgres:5432/bmft?sslmode=disable
POSTGRES_USER=bmft
POSTGRES_PASSWORD=bmft
POSTGRES_DB=bmft
POSTGRES_PORT=5432

# ────────────────────────────────────────────────────────────────────────────
# 💻 СЦЕНАРИЙ 2: БД в Docker, Бот локально (для отладки)
# ────────────────────────────────────────────────────────────────────────────
# Команды:
#   docker-compose -f docker-compose.env.yaml up -d
#   go run cmd/bot/main.go
# Важно:
#   - Используй @localhost вместо @postgres (БД снаружи Docker сети)
#   - Порт 5432 проброшен наружу в docker-compose.env.yaml
# ────────────────────────────────────────────────────────────────────────────
#POSTGRES_DSN=postgres://bmft:bmft@localhost:5432/bmft?sslmode=disable
#POSTGRES_USER=bmft
#POSTGRES_PASSWORD=bmft
#POSTGRES_DB=bmft
#POSTGRES_PORT=5432

# ────────────────────────────────────────────────────────────────────────────
# 🌐 СЦЕНАРИЙ 3: Удалённая БД, Бот локально (для работы с prod БД)
# ────────────────────────────────────────────────────────────────────────────
# Команды:
#   go run cmd/bot/main.go
# Важно:
#   - Используй sslmode=require для безопасности
#   - POSTGRES_USER/PASSWORD/DB/PORT не нужны (БД уже настроена)
# ────────────────────────────────────────────────────────────────────────────
#POSTGRES_DSN=postgres://user:pass@db.example.com:5432/bmft?sslmode=require

# ────────────────────────────────────────────────────────────────────────────
# 🐳 СЦЕНАРИЙ 4: Удалённая БД, Бот в Docker (production деплой)
# ────────────────────────────────────────────────────────────────────────────
# Команды:
#   docker-compose -f docker-compose.bot.yaml up -d
# Важно:
#   - Используй sslmode=require для безопасности
#   - POSTGRES_USER/PASSWORD/DB/PORT не нужны (БД уже настроена)
# ────────────────────────────────────────────────────────────────────────────
#POSTGRES_DSN=postgres://user:pass@db.example.com:5432/bmft?sslmode=require

# ============================================================================
# ОПЦИОНАЛЬНЫЕ ПАРАМЕТРЫ (defaults работают для всех сценариев)
# ============================================================================

# Логирование
LOG_LEVEL=info                  # debug | info | warn | error
LOGGER_PRETTY=false             # true для dev (читаемо), false для prod (JSON)

# Timeouts
POLLING_TIMEOUT=60              # Long Polling timeout (секунды)
SHUTDOWN_TIMEOUT=15s            # Graceful shutdown timeout

# Metrics
METRICS_ADDR=:9090              # Health check endpoint /healthz
