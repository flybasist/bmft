package limiter

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

// handleSetContentLimit —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
// Usage: /setcontentlimit <content_type> <limit>
// Example: /setcontentlimit photo 5
// Example: /setcontentlimit sticker -1  (–ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–µ—Ç)
// Example: /setcontentlimit video 0     (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
func (m *LimiterModule) handleSetContentLimit(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
	if !c.Message().FromGroup() {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
	chatID := c.Chat().ID
	adminIDs, err := c.Bot().AdminsOf(c.Chat())
	if err != nil {
		m.logger.Error("failed to get admins", zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	isAdmin := false
	senderID := c.Sender().ID
	for _, admin := range adminIDs {
		if admin.User.ID == senderID {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞")
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	args := strings.Fields(c.Message().Text)
	if len(args) != 3 {
		return c.Reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setcontentlimit <content_type> <limit>\n\n" +
			"–¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: photo, video, sticker, voice, document, audio, animation, video_note\n" +
			"–õ–∏–º–∏—Ç—ã:\n" +
			"  -1 = –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–µ—Ç\n" +
			"   0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n" +
			"   N = –ª–∏–º–∏—Ç –Ω–∞ N —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å\n\n" +
			"–ü—Ä–∏–º–µ—Ä: /setcontentlimit photo 5")
	}

	contentType := args[1]
	limitStr := args[2]

	// –í–∞–ª–∏–¥–∞—Ü–∏—è content_type
	validTypes := []string{"photo", "video", "sticker", "voice", "document", "audio", "animation", "video_note"}
	isValidType := false
	for _, vt := range validTypes {
		if contentType == vt {
			isValidType = true
			break
		}
	}

	if !isValidType {
		return c.Reply(fmt.Sprintf("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %s\n\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: %s",
			contentType, strings.Join(validTypes, ", ")))
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏–º–∏—Ç–∞
	limit, err := strconv.Atoi(limitStr)
	if err != nil {
		return c.Reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
	}

	if limit < -1 {
		return c.Reply("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ -1")
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î (limiter_config)
	if err := m.saveContentLimit(chatID, 0, contentType, limit); err != nil {
		m.logger.Error("failed to save content limit",
			zap.Int64("chat_id", chatID),
			zap.String("content_type", contentType),
			zap.Int("limit", limit),
			zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	var status string
	switch {
	case limit == -1:
		status = "üö´ –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–µ—Ç"
	case limit == 0:
		status = "‚úÖ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
	default:
		status = fmt.Sprintf("üìä –õ–∏–º–∏—Ç: %d —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å", limit)
	}

	return c.Reply(fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"+
		"–¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %s\n"+
		"–°—Ç–∞—Ç—É—Å: %s", contentType, status))
}

// handleMyContentUsage –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
// Usage: /mycontentusage
func (m *LimiterModule) handleMyContentUsage(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
	if !c.Message().FromGroup() {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	chatID := c.Chat().ID
	userID := c.Sender().ID
	username := c.Sender().Username
	if username == "" {
		username = c.Sender().FirstName
	}

	today := time.Now()

	// –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	contentTypes := []string{"photo", "video", "sticker", "voice", "document", "audio", "animation", "video_note"}

	var response strings.Builder
	response.WriteString(fmt.Sprintf("üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ @%s –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n", username))

	hasAnyUsage := false

	for _, contentType := range contentTypes {
		// –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç
		limit, err := m.limitRepo.GetContentLimit(chatID, userID, contentType)
		if err != nil {
			m.logger.Error("failed to get content limit",
				zap.String("content_type", contentType),
				zap.Error(err))
			continue
		}

		// –ï—Å–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
		if limit == 0 {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Å—á—ë—Ç—á–∏–∫
		count, err := m.limitRepo.GetContentCount(chatID, userID, contentType, today)
		if err != nil {
			m.logger.Error("failed to get content count",
				zap.String("content_type", contentType),
				zap.Error(err))
			continue
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
		if limit != 0 || count > 0 {
			hasAnyUsage = true

			var statusIcon string
			var statusText string

			switch {
			case limit == -1:
				statusIcon = "üö´"
				statusText = "–∑–∞–ø—Ä–µ—â–µ–Ω–æ"
			case count >= limit && limit > 0:
				statusIcon = "‚ùå"
				statusText = fmt.Sprintf("%d/%d (–ø—Ä–µ–≤—ã—à–µ–Ω!)", count, limit)
			case limit > 0:
				statusIcon = "üìà"
				statusText = fmt.Sprintf("%d/%d", count, limit)
			default:
				continue // skip –µ—Å–ª–∏ 0 –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
			}

			response.WriteString(fmt.Sprintf("%s %s: %s\n", statusIcon, contentType, statusText))
		}
	}

	if !hasAnyUsage {
		response.WriteString("‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
	}

	return c.Reply(response.String())
}

// handleListContentLimits –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ª–∏–º–∏—Ç—ã —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
// Usage: /listcontentlimits
func (m *LimiterModule) handleListContentLimits(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
	if !c.Message().FromGroup() {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
	chatID := c.Chat().ID
	adminIDs, err := c.Bot().AdminsOf(c.Chat())
	if err != nil {
		m.logger.Error("failed to get admins", zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	isAdmin := false
	senderID := c.Sender().ID
	for _, admin := range adminIDs {
		if admin.User.ID == senderID {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞")
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏–º–∏—Ç—ã –∏–∑ –ë–î
	limits, err := m.getAllContentLimits(chatID)
	if err != nil {
		m.logger.Error("failed to get all content limits",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏–º–∏—Ç–æ–≤")
	}

	if len(limits) == 0 {
		return c.Reply("üìã –õ–∏–º–∏—Ç—ã –Ω–∞ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n\n" +
			"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setcontentlimit –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
	}

	var response strings.Builder
	response.WriteString("üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ª–∏–º–∏—Ç—ã –Ω–∞ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞:\n\n")

	for contentType, limit := range limits {
		var status string
		switch {
		case limit == -1:
			status = "üö´ –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–µ—Ç"
		case limit == 0:
			status = "‚úÖ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
		default:
			status = fmt.Sprintf("üìä %d —Å–æ–æ–±—â–µ–Ω–∏–π/–¥–µ–Ω—å", limit)
		}

		response.WriteString(fmt.Sprintf("%s: %s\n", contentType, status))
	}

	return c.Reply(response.String())
}

// saveContentLimit —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–∏–º–∏—Ç –≤ limiter_config
func (m *LimiterModule) saveContentLimit(chatID, userID int64, contentType string, limit int) error {
	return m.limitRepo.SaveContentLimit(chatID, userID, contentType, limit)
}

// getAllContentLimits –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ª–∏–º–∏—Ç—ã —á–∞—Ç–∞ –∏–∑ limiter_config
func (m *LimiterModule) getAllContentLimits(chatID int64) (map[string]int, error) {
	return m.limitRepo.GetAllContentLimits(chatID)
}
