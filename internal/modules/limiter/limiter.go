package limiter

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/flybasist/bmft/internal/core"
	"github.com/flybasist/bmft/internal/postgresql/repositories"
	"go.uber.org/zap"
	"gopkg.in/telebot.v3"
)

// LimiterModule ‚Äî –º–æ–¥—É–ª—å –∫–æ–Ω—Ç—Ä–æ–ª—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type LimiterModule struct {
	limitRepo  *repositories.LimitRepository
	logger     *zap.Logger
	adminUsers []int64
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è –ª–∏–º–∏—Ç–æ–≤
func New(limitRepo *repositories.LimitRepository, logger *zap.Logger) *LimiterModule {
	return &LimiterModule{
		limitRepo:  limitRepo,
		logger:     logger,
		adminUsers: []int64{
			// TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
		},
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è
func (m *LimiterModule) Name() string {
	return "limiter"
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å
func (m *LimiterModule) Init(deps core.ModuleDependencies) error {
	m.logger.Info("limiter module initialized")
	return nil
}

// Commands –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è
func (m *LimiterModule) Commands() []core.BotCommand {
	return []core.BotCommand{
		{Command: "/limits", Description: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ª–∏–º–∏—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"},
	}
}

// Enabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –¥–ª—è —á–∞—Ç–∞ (–≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω)
func (m *LimiterModule) Enabled(chatID int64) (bool, error) {
	// –ú–æ–¥—É–ª—å –ª–∏–º–∏—Ç–æ–≤ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
	return true, nil
}

// OnMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (m *LimiterModule) OnMessage(ctx *core.MessageContext) error {
	msg := ctx.Message

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ –∫–æ–º–∞–Ω–¥ AI
	if !m.shouldCheckLimit(msg) {
		return nil
	}

	userID := msg.Sender.ID
	username := msg.Sender.Username

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç
	allowed, info, err := m.limitRepo.CheckAndIncrement(userID, username)
	if err != nil {
		m.logger.Error("failed to check limit",
			zap.Int64("user_id", userID),
			zap.Error(err),
		)
		return err
	}

	// –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º
	if !allowed {
		return m.sendLimitExceededMessage(ctx, info)
	}

	// –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
	if info.DailyRemaining <= 2 || info.MonthlyRemaining <= 10 {
		m.sendLimitWarning(ctx, info)
	}

	return nil
}

// Shutdown –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª—è
func (m *LimiterModule) Shutdown() error {
	m.logger.Info("limiter module shutdown")
	return nil
}

// shouldCheckLimit –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏–º–∏—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *LimiterModule) shouldCheckLimit(msg *telebot.Message) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	// –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥ AI (GPT:)
	return msg.Private()
}

// sendLimitExceededMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
func (m *LimiterModule) sendLimitExceededMessage(ctx *core.MessageContext, info *repositories.LimitInfo) error {
	text := fmt.Sprintf(
		"‚õîÔ∏è *–õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω!*\n\n"+
			"üìä –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: %d/%d\n"+
			"üìä –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç: %d/%d\n\n"+
			"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
		info.DailyUsed, info.DailyLimit,
		info.MonthlyUsed, info.MonthlyLimit,
	)

	return ctx.SendReply(text)
}

// sendLimitWarning –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É
func (m *LimiterModule) sendLimitWarning(ctx *core.MessageContext, info *repositories.LimitInfo) {
	text := fmt.Sprintf(
		"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å:\n"+
			"üìä –î–Ω–µ–≤–Ω–æ–π: %d/%d –∑–∞–ø—Ä–æ—Å–æ–≤\n"+
			"üìä –ú–µ—Å—è—á–Ω—ã–π: %d/%d –∑–∞–ø—Ä–æ—Å–æ–≤",
		info.DailyRemaining, info.DailyLimit,
		info.MonthlyRemaining, info.MonthlyLimit,
	)

	// –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
	if err := ctx.SendReply(text); err != nil {
		m.logger.Warn("failed to send limit warning", zap.Error(err))
	}
}

// RegisterCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è
func (m *LimiterModule) RegisterCommands(bot *telebot.Bot) {
	bot.Handle("/limits", m.handleLimitsCommand)
}

// RegisterAdminCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (m *LimiterModule) RegisterAdminCommands(bot *telebot.Bot) {
	bot.Handle("/setlimit", m.handleSetLimitCommand)
	bot.Handle("/getlimit", m.handleGetLimitCommand)
}

// handleLimitsCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /limits
func (m *LimiterModule) handleLimitsCommand(c telebot.Context) error {
	userID := c.Sender().ID

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
	info, err := m.limitRepo.GetLimitInfo(userID)
	if err != nil {
		m.logger.Error("failed to get limit info",
			zap.Int64("user_id", userID),
			zap.Error(err),
		)
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö")
	}

	text := fmt.Sprintf(
		"üìä *–í–∞—à–∏ –ª–∏–º–∏—Ç—ã:*\n\n"+
			"üîµ *–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç:*\n"+
			"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d/%d\n"+
			"   –û—Å—Ç–∞–ª–æ—Å—å: %d\n\n"+
			"üü¢ *–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç:*\n"+
			"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d/%d\n"+
			"   –û—Å—Ç–∞–ª–æ—Å—å: %d\n\n"+
			"üí° _–õ–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å/–º–µ—Å—è—Ü._",
		info.DailyUsed, info.DailyLimit, info.DailyRemaining,
		info.MonthlyUsed, info.MonthlyLimit, info.MonthlyRemaining,
	)

	return c.Send(text, &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
}

// handleSetLimitCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /setlimit
// –§–æ—Ä–º–∞—Ç: /setlimit <user_id> daily|monthly <limit>
func (m *LimiterModule) handleSetLimitCommand(c telebot.Context) error {
	if !m.isAdmin(c.Sender().ID) {
		return c.Send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
	}

	args := strings.Fields(c.Text())
	if len(args) != 4 {
		return c.Send("üìñ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n`/setlimit <user_id> daily|monthly <limit>`\n\n*–ü—Ä–∏–º–µ—Ä—ã:*\n`/setlimit 123456789 daily 20`\n`/setlimit 123456789 monthly 500`",
			&telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
	}

	userID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")
	}

	limitType := args[2]
	limit, err := strconv.Atoi(args[3])
	if err != nil {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
	}

	if limit < 0 {
		return c.Send("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
	}

	switch limitType {
	case "daily":
		if err := m.limitRepo.SetDailyLimit(userID, limit); err != nil {
			m.logger.Error("failed to set daily limit",
				zap.Int64("user_id", userID),
				zap.Error(err),
			)
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç")
		}
		return c.Send(fmt.Sprintf("‚úÖ –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `%d` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *%d*",
			userID, limit), &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})

	case "monthly":
		if err := m.limitRepo.SetMonthlyLimit(userID, limit); err != nil {
			m.logger.Error("failed to set monthly limit",
				zap.Int64("user_id", userID),
				zap.Error(err),
			)
			return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç")
		}
		return c.Send(fmt.Sprintf("‚úÖ –ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `%d` —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *%d*",
			userID, limit), &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})

	default:
		return c.Send("‚ùå –¢–∏–ø –ª–∏–º–∏—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: `daily` –∏–ª–∏ `monthly`",
			&telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
	}
}

// handleGetLimitCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /getlimit
// –§–æ—Ä–º–∞—Ç: /getlimit <user_id>
func (m *LimiterModule) handleGetLimitCommand(c telebot.Context) error {
	if !m.isAdmin(c.Sender().ID) {
		return c.Send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
	}

	args := strings.Fields(c.Text())
	if len(args) != 2 {
		return c.Send("üìñ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n`/getlimit <user_id>`\n\n*–ü—Ä–∏–º–µ—Ä:*\n`/getlimit 123456789`",
			&telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
	}

	userID, err := strconv.ParseInt(args[1], 10, 64)
	if err != nil {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π user_id")
	}

	info, err := m.limitRepo.GetLimitInfo(userID)
	if err != nil {
		m.logger.Error("failed to get limit info",
			zap.Int64("user_id", userID),
			zap.Error(err),
		)
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
	}

	text := fmt.Sprintf(
		"üìä *–õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è* `%d`:\n\n"+
			"üîµ *–î–Ω–µ–≤–Ω–æ–π:* %d/%d (–æ—Å—Ç–∞–ª–æ—Å—å %d)\n"+
			"üü¢ *–ú–µ—Å—è—á–Ω—ã–π:* %d/%d (–æ—Å—Ç–∞–ª–æ—Å—å %d)",
		userID,
		info.DailyUsed, info.DailyLimit, info.DailyRemaining,
		info.MonthlyUsed, info.MonthlyLimit, info.MonthlyRemaining,
	)

	return c.Send(text, &telebot.SendOptions{ParseMode: telebot.ModeMarkdown})
}

// isAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
func (m *LimiterModule) isAdmin(userID int64) bool {
	for _, id := range m.adminUsers {
		if id == userID {
			return true
		}
	}
	return false
}

// SetAdminUsers —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
func (m *LimiterModule) SetAdminUsers(adminUsers []int64) {
	m.adminUsers = adminUsers
	m.logger.Info("admin users updated", zap.Int("count", len(adminUsers)))
}
