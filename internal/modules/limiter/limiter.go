package limiter

import (
	"fmt"
	"strconv"
	"strings"

	"github.com/flybasist/bmft/internal/core"
	"github.com/flybasist/bmft/internal/postgresql/repositories"
	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

// LimiterModule —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç–∞–º–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —á–∞—Ç–∞—Ö
type LimiterModule struct {
	vipRepo           *repositories.VIPRepository
	contentLimitsRepo *repositories.ContentLimitsRepository
	moduleRepo        *repositories.ModuleRepository
	logger            *zap.Logger
	bot               *tele.Bot
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä LimiterModule
func New(vipRepo *repositories.VIPRepository, contentLimitsRepo *repositories.ContentLimitsRepository, moduleRepo *repositories.ModuleRepository, logger *zap.Logger, bot *tele.Bot) *LimiterModule {
	return &LimiterModule{
		vipRepo:           vipRepo,
		contentLimitsRepo: contentLimitsRepo,
		moduleRepo:        moduleRepo,
		logger:            logger,
		bot:               bot,
	}
}

// Shutdown –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–æ–¥—É–ª—è
func (m *LimiterModule) Shutdown() error {
	m.logger.Info("limiter module shutdown")
	return nil
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å
func (m *LimiterModule) Init(deps core.ModuleDependencies) error {
	m.logger.Info("limiter module initialized")
	return nil
}

// Commands –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è
func (m *LimiterModule) Commands() []core.BotCommand {
	return []core.BotCommand{
		{Command: "/mystats", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"},
		{Command: "/setlimit", Description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç –Ω–∞ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞–¥–º–∏–Ω—ã)"},
		{Command: "/setvip", Description: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω—ã)"},
		{Command: "/removevip", Description: "–°–Ω—è—Ç—å VIP-—Å—Ç–∞—Ç—É—Å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω—ã)"},
		{Command: "/listvips", Description: "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω—ã)"},
	}
}

// Enabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
func (m *LimiterModule) Enabled(chatID int64) (bool, error) {
	return m.moduleRepo.IsEnabled(chatID, "limiter")
}

// detectContentType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *LimiterModule) detectContentType(msg *tele.Message) string {
	if msg.Photo != nil {
		return "photo"
	}
	if msg.Video != nil {
		return "video"
	}
	if msg.Sticker != nil {
		return "sticker"
	}
	if msg.Animation != nil {
		return "animation"
	}
	if msg.Voice != nil {
		return "voice"
	}
	if msg.VideoNote != nil {
		return "video_note"
	}
	if msg.Audio != nil {
		return "audio"
	}
	if msg.Document != nil {
		// –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–∏—Ñ–æ–∫, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ —Ñ–∞–π–ª—ã
		if msg.Document.MIME == "image/gif" {
			return "animation"
		}
		return "document"
	}
	if msg.Location != nil {
		return "location"
	}
	if msg.Contact != nil {
		return "contact"
	}
	if msg.Text != "" {
		return "text"
	}
	return "unknown"
}

// RegisterCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
func (m *LimiterModule) RegisterCommands(bot *tele.Bot) {
	bot.Handle("/mystats", m.handleMyStats)
	// bot.Handle("/myweek", m.handleMyWeek) // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
}

// RegisterAdminCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
func (m *LimiterModule) RegisterAdminCommands(bot *tele.Bot) {
	bot.Handle("/setlimit", m.handleSetLimit)
	bot.Handle("/setvip", m.handleSetVIP)
	bot.Handle("/removevip", m.handleRemoveVIP)
	bot.Handle("/listvips", m.handleListVIPs)
}

// OnMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (m *LimiterModule) OnMessage(ctx *core.MessageContext) error {
	chatID := ctx.Chat.ID
	userID := ctx.Sender.ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º VIP-—Å—Ç–∞—Ç—É—Å
	isVIP, err := m.vipRepo.IsVIP(chatID, userID)
	if err != nil {
		m.logger.Error("failed to check VIP status", zap.Error(err))
		return nil // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
	}
	if isVIP {
		return nil // VIP –Ω–µ –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç–æ–≤
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	contentType := m.detectContentType(ctx.Message)
	if contentType == "unknown" {
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã
	limits, err := m.contentLimitsRepo.GetLimits(chatID, nil)
	if err != nil {
		m.logger.Error("failed to get limits", zap.Error(err))
		return nil
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç—á–∏–∫
	counter, err := m.contentLimitsRepo.GetCounter(chatID, userID, contentType)
	if err != nil {
		m.logger.Error("failed to get counter", zap.Error(err))
		return nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
	var limitValue int
	switch contentType {
	case "text":
		limitValue = limits.LimitText
	case "photo":
		limitValue = limits.LimitPhoto
	case "video":
		limitValue = limits.LimitVideo
	case "sticker":
		limitValue = limits.LimitSticker
	case "animation":
		limitValue = limits.LimitAnimation
	case "voice":
		limitValue = limits.LimitVoice
	case "document":
		limitValue = limits.LimitDocument
	case "audio":
		limitValue = limits.LimitAudio
	case "location":
		limitValue = limits.LimitLocation
	case "contact":
		limitValue = limits.LimitContact
	case "video_note":
		limitValue = limits.LimitVideoNote
	default:
		return nil
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç–µ, –µ—Å–ª–∏ –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É
	if limitValue > 0 {
		if counter == limitValue {
			// –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è
			warning := fmt.Sprintf("‚ö†Ô∏è @%s, –ª–∏–º–∏—Ç –Ω–∞ %s –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (%d/%d)", ctx.Sender.Username, contentType, counter, limitValue)
			if _, err := ctx.Bot.Send(ctx.Chat, warning); err != nil {
				m.logger.Error("failed to send warning", zap.Error(err))
			}
		} else if counter == limitValue-1 {
			// –û—Å—Ç–∞–ª—Å—è 1 –¥–æ –ª–∏–º–∏—Ç–∞
			warning := fmt.Sprintf("‚ö†Ô∏è @%s, –æ—Å—Ç–∞–ª—Å—è 1 %s –¥–æ –ª–∏–º–∏—Ç–∞", ctx.Sender.Username, contentType)
			if _, err := ctx.Bot.Send(ctx.Chat, warning); err != nil {
				m.logger.Error("failed to send warning", zap.Error(err))
			}
		}
	}

	// –ï—Å–ª–∏ –ª–∏–º–∏—Ç -1 (–∑–∞–ø—Ä–µ—â–µ–Ω–æ) –∏–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
	if limitValue == -1 || (limitValue > 0 && counter > limitValue) {
		// –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		if err := ctx.Bot.Delete(ctx.Message); err != nil {
			m.logger.Error("failed to delete message", zap.Error(err))
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
		warning := fmt.Sprintf("‚ùå @%s, –ª–∏–º–∏—Ç –Ω–∞ %s –¥–æ—Å—Ç–∏–≥–Ω—É—Ç (%d/%d)", ctx.Sender.Username, contentType, counter, limitValue)
		if limitValue == -1 {
			warning = fmt.Sprintf("‚ùå @%s, %s –∑–∞–ø—Ä–µ—â–µ–Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ", ctx.Sender.Username, contentType)
		}
		if _, err := ctx.Bot.Send(ctx.Chat, warning); err != nil {
			m.logger.Error("failed to send warning", zap.Error(err))
		}
		return nil
	}

	// –°—á—ë—Ç—á–∏–∫ —É–∂–µ —É–≤–µ–ª–∏—á–µ–Ω –º–æ–¥—É–ª–µ–º statistics, –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
	// if err := m.contentLimitsRepo.IncrementCounter(chatID, userID, contentType); err != nil {
	//     m.logger.Error("failed to increment counter", zap.Error(err))
	// }

	return nil
}

// handleMyStats –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (m *LimiterModule) handleMyStats(c tele.Context) error {
	chatID := c.Chat().ID
	userID := c.Sender().ID

	isVIP, err := m.vipRepo.IsVIP(chatID, userID)
	if err != nil {
		return c.Send("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
	}

	if isVIP {
		return c.Send("üëë *VIP-—Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–µ–Ω*\n\n–í—Å–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –≤–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω—ã!", &tele.SendOptions{ParseMode: tele.ModeMarkdown})
	}

	limits, err := m.contentLimitsRepo.GetLimits(chatID, &userID)
	if err != nil {
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã")
	}

	// –í—Å–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
	types := []struct {
		emoji string
		name  string
		field string
		value int
	}{
		{"üìù", "–¢–µ–∫—Å—Ç", "text", limits.LimitText},
		{"üì∑", "–§–æ—Ç–æ", "photo", limits.LimitPhoto},
		{"üé¨", "–í–∏–¥–µ–æ", "video", limits.LimitVideo},
		{"üòÄ", "–°—Ç–∏–∫–µ—Ä—ã", "sticker", limits.LimitSticker},
		{"üéûÔ∏è", "–ì–∏—Ñ–∫–∏", "animation", limits.LimitAnimation},
		{"üé§", "–ì–æ–ª–æ—Å–æ–≤—ã–µ", "voice", limits.LimitVoice},
		{"üìé", "–î–æ–∫—É–º–µ–Ω—Ç—ã", "document", limits.LimitDocument},
		{"üéµ", "–ê—É–¥–∏–æ", "audio", limits.LimitAudio},
		{"üìç", "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è", "location", limits.LimitLocation},
		{"üë§", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "contact", limits.LimitContact},
		{"üîû", "–ú–∞—Ç", "banned_words", limits.LimitBannedWords},
		{"üé•", "–ö—Ä—É–∂–æ—á–∫–∏", "video_note", limits.LimitVideoNote},
	}
	text := "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n"
	for _, t := range types {
		counter, _ := m.contentLimitsRepo.GetCounter(chatID, userID, t.field)
		switch {
		case t.value == -1:
			text += fmt.Sprintf("%s %s: %d –∏–∑ 0 (–∑–∞–ø—Ä–µ—â–µ–Ω–æ)\n", t.emoji, t.name, counter)
		case t.value == 0:
			text += fmt.Sprintf("%s %s: %d –∏–∑ 0 (–±–µ–∑ –ª–∏–º–∏—Ç–∞)\n", t.emoji, t.name, counter)
		default:
			warn := ""
			if counter >= t.value {
				warn = "‚õîÔ∏è"
			} else if counter >= t.value-2 {
				warn = "‚ö†Ô∏è"
			}
			text += fmt.Sprintf("%s %s: %d –∏–∑ %d%s\n", t.emoji, t.name, counter, t.value, warn)
		}
	}
	return c.Send(text, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}

// handleSetLimit —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç
func (m *LimiterModule) handleSetLimit(c tele.Context) error {
	isAdmin, err := core.IsUserAdmin(m.bot, c.Chat(), c.Sender().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
	if !isAdmin {
		return c.Send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
	}

	args := c.Args()
	if len(args) < 2 || len(args) > 3 {
		return c.Send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setlimit <—Ç–∏–ø> <–∑–Ω–∞—á–µ–Ω–∏–µ> [@username]")
	}

	contentType := args[0]
	limitValue, err := strconv.Atoi(args[1])
	if err != nil || limitValue < -1 {
		return c.Send("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞")
	}

	chatID := c.Chat().ID
	var userID *int64

	// –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω @username, –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if len(args) == 3 {
		return c.Send("‚ùå –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤ –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	// –î–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º reply
	if c.Message().ReplyTo != nil {
		id := c.Message().ReplyTo.Sender.ID
		userID = &id
	}

	if err := m.contentLimitsRepo.SetLimit(chatID, userID, contentType, limitValue); err != nil {
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç")
	}

	if userID == nil {
		return c.Send(fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –¥–ª—è –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %s = %d", contentType, limitValue))
	}
	return c.Send(fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s = %d", contentType, limitValue))
}

// handleSetVIP —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å
func (m *LimiterModule) handleSetVIP(c tele.Context) error {
	isAdmin, err := core.IsUserAdmin(m.bot, c.Chat(), c.Sender().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
	if !isAdmin {
		return c.Send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
	}

	if c.Message().ReplyTo == nil {
		return c.Send("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	chatID := c.Chat().ID
	userID := c.Message().ReplyTo.Sender.ID

	args := c.Args()
	reason := "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
	if len(args) > 1 {
		reason = strings.Join(args[1:], " ")
	}

	if err := m.vipRepo.GrantVIP(chatID, userID, c.Sender().ID, reason); err != nil {
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å VIP-—Å—Ç–∞—Ç—É—Å")
	}

	return c.Send(fmt.Sprintf("‚úÖ VIP-—Å—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID))
}

// handleRemoveVIP —Å–Ω–∏–º–∞–µ—Ç VIP-—Å—Ç–∞—Ç—É—Å
func (m *LimiterModule) handleRemoveVIP(c tele.Context) error {
	isAdmin, err := core.IsUserAdmin(m.bot, c.Chat(), c.Sender().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
	if !isAdmin {
		return c.Send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
	}

	if c.Message().ReplyTo == nil {
		return c.Send("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
	}

	chatID := c.Chat().ID
	userID := c.Message().ReplyTo.Sender.ID

	if err := m.vipRepo.RevokeVIP(chatID, userID); err != nil {
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–Ω—è—Ç—å VIP-—Å—Ç–∞—Ç—É—Å")
	}

	return c.Send(fmt.Sprintf("‚úÖ VIP-—Å—Ç–∞—Ç—É—Å —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", userID))
}

// handleListVIPs –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (m *LimiterModule) handleListVIPs(c tele.Context) error {
	isAdmin, err := core.IsUserAdmin(m.bot, c.Chat(), c.Sender().ID)
	if err != nil {
		return c.Send("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}
	if !isAdmin {
		return c.Send("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
	}

	chatID := c.Chat().ID
	vips, err := m.vipRepo.ListVIPs(chatID)
	if err != nil {
		return c.Send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ VIP")
	}

	if len(vips) == 0 {
		return c.Send("‚ÑπÔ∏è –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
	}

	text := "üëë *VIP-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n"
	for i, vip := range vips {
		text += fmt.Sprintf("%d. User ID: `%d`\n   –ü—Ä–∏—á–∏–Ω–∞: %s\n\n", i+1, vip.UserID, vip.Reason)
	}

	return c.Send(text, &tele.SendOptions{ParseMode: tele.ModeMarkdown})
}
