package reactions

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"
)

// handleMyTextViolations –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—á—ë—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
// Usage: /mytextviolations
func (m *ReactionsModule) handleMyTextViolations(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
	if c.Chat().Type != tele.ChatGroup && c.Chat().Type != tele.ChatSuperGroup {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	chatID := c.Chat().ID
	userID := c.Sender().ID
	username := c.Sender().Username
	if username == "" {
		username = c.Sender().FirstName
	}

	today := time.Now()

	// –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç
	limit, err := m.getTextViolationLimit(chatID, userID)
	if err != nil {
		m.logger.Error("failed to get text violation limit",
			zap.Int64("chat_id", chatID),
			zap.Int64("user_id", userID),
			zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç—á–∏–∫
	count, err := m.getTextViolationCount(chatID, userID, today)
	if err != nil {
		m.logger.Error("failed to get text violation count",
			zap.Int64("chat_id", chatID),
			zap.Int64("user_id", userID),
			zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—á—ë—Ç—á–∏–∫")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var response string

	if limit == 0 {
		response = fmt.Sprintf("üìä @%s\n\n"+
			"–¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è: %d\n"+
			"–õ–∏–º–∏—Ç: ‚úÖ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π", username, count)
	} else {
		var statusIcon string
		if count >= limit {
			statusIcon = "‚ùå"
		} else if count+2 >= limit {
			statusIcon = "‚ö†Ô∏è"
		} else {
			statusIcon = "‚úÖ"
		}

		response = fmt.Sprintf("üìä @%s\n\n"+
			"%s –¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: %d/%d\n"+
			"–û—Å—Ç–∞–ª–æ—Å—å: %d", username, statusIcon, count, limit, limit-count)
	}

	return c.Reply(response)
}

// handleSetTextViolationLimit —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ª–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è
// Usage: /settextlimit <limit>
// Example: /settextlimit 10
// Example: /settextlimit 0  (–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π)
func (m *ReactionsModule) handleSetTextViolationLimit(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
	adminIDs, err := c.Bot().AdminsOf(c.Chat())
	if err != nil {
		m.logger.Error("failed to get admins", zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	isAdmin := false
	senderID := c.Sender().ID
	for _, admin := range adminIDs {
		if admin.User.ID == senderID {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
	if c.Chat().Type != tele.ChatGroup && c.Chat().Type != tele.ChatSuperGroup {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	// –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	args := strings.Fields(c.Text())
	if len(args) != 2 {
		return c.Reply("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /settextlimit <limit>\n\n" +
			"–õ–∏–º–∏—Ç:\n" +
			"   0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n" +
			"   N = –ª–∏–º–∏—Ç –Ω–∞ N –Ω–∞—Ä—É—à–µ–Ω–∏–π/–¥–µ–Ω—å\n\n" +
			"–ü—Ä–∏–º–µ—Ä: /settextlimit 10")
	}

	limitStr := args[1]

	// –ü–∞—Ä—Å–∏–Ω–≥ –ª–∏–º–∏—Ç–∞
	limit, err := strconv.Atoi(limitStr)
	if err != nil {
		return c.Reply("‚ùå –õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
	}

	if limit < 0 {
		return c.Reply("‚ùå –õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º")
	}

	// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ (—á–µ—Ä–µ–∑ reactions_config —Å violation_code=21)
	// –°–æ–∑–¥–∞—ë–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Ä–µ–∞–∫—Ü–∏—é —Å violation_code=21
	chatID := c.Chat().ID

	query := `
		INSERT INTO reactions_config 
			(chat_id, user_id, content_type, trigger_type, trigger_pattern, 
			 reaction_type, reaction_data, violation_code, cooldown_minutes, 
			 is_enabled, is_vip, updated_at)
		VALUES ($1, NULL, 'text', 'regex', '.*', 'delete', '', 21, 0, true, false, NOW())
		ON CONFLICT (chat_id, COALESCE(user_id, -1), content_type, trigger_pattern)
		DO UPDATE SET
			violation_code = 21,
			updated_at = NOW()
	`

	_, err = m.db.Exec(query, chatID)
	if err != nil {
		m.logger.Error("failed to save text violation limit",
			zap.Int64("chat_id", chatID),
			zap.Int("limit", limit),
			zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–º–∏—Ç")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
	var status string
	if limit == 0 {
		status = "‚úÖ –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
	} else {
		status = fmt.Sprintf("üìä –õ–∏–º–∏—Ç: %d –Ω–∞—Ä—É—à–µ–Ω–∏–π/–¥–µ–Ω—å", limit)
	}

	return c.Reply(fmt.Sprintf("‚úÖ –õ–∏–º–∏—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\n\n"+
		"–°—Ç–∞—Ç—É—Å: %s\n\n"+
		"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞ 2 –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–æ –ª–∏–º–∏—Ç–∞.\n"+
		"–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏ –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.", status))
}

// handleChatTextViolations –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π —á–∞—Ç–∞ (–∞–¥–º–∏–Ω—ã)
// Usage: /chattextviolations
func (m *ReactionsModule) handleChatTextViolations(c tele.Context) error {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
	adminIDs, err := c.Bot().AdminsOf(c.Chat())
	if err != nil {
		m.logger.Error("failed to get admins", zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
	}

	isAdmin := false
	senderID := c.Sender().ID
	for _, admin := range adminIDs {
		if admin.User.ID == senderID {
			isAdmin = true
			break
		}
	}

	if !isAdmin {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
	if c.Chat().Type != tele.ChatGroup && c.Chat().Type != tele.ChatSuperGroup {
		return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö")
	}

	chatID := c.Chat().ID
	today := time.Now()
	startOfDay := time.Date(today.Year(), today.Month(), today.Day(), 0, 0, 0, 0, today.Location())

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	query := `
		SELECT user_id, COUNT(*) as violation_count
		FROM reactions_log
		WHERE chat_id = $1 
		  AND violation_code = 21
		  AND created_at >= $2
		GROUP BY user_id
		ORDER BY violation_count DESC
		LIMIT 10
	`

	rows, err := m.db.Query(query, chatID, startOfDay)
	if err != nil {
		m.logger.Error("failed to get chat text violations",
			zap.Int64("chat_id", chatID),
			zap.Error(err))
		return c.Reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
	}
	defer rows.Close()

	var response strings.Builder
	response.WriteString("üìä –¢–µ–∫—Å—Ç–æ–≤—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n")

	hasViolations := false
	rank := 1

	for rows.Next() {
		var userID int64
		var count int

		if err := rows.Scan(&userID, &count); err != nil {
			m.logger.Error("failed to scan violation stats", zap.Error(err))
			continue
		}

		hasViolations = true

		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å username (–µ—Å–ª–∏ –±–æ—Ç –≤–∏–¥–µ–ª —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
		// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º user_id
		response.WriteString(fmt.Sprintf("%d. User ID %d: %d –Ω–∞—Ä—É—à–µ–Ω–∏–π\n", rank, userID, count))
		rank++
	}

	if !hasViolations {
		response.WriteString("‚úÖ –ù–∞—Ä—É—à–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
	}

	return c.Reply(response.String())
}
