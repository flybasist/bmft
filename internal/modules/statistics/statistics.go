package statistics

import (
	"database/sql"
	"fmt"
	"strings"
	"time"

	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"github.com/flybasist/bmft/internal/core"
	"github.com/flybasist/bmft/internal/postgresql/repositories"
)

// StatisticsModule —Ä–µ–∞–ª–∏–∑—É–µ—Ç –º–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
// –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º —á–µ—Ä–µ–∑ —Ç–∞–±–ª–∏—Ü—É content_counters.
// –ü—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (text, photo, video –∏ —Ç.–¥.).
// –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã: /mystats (–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞), /chatstats (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞), /topchat (—Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö).
type StatisticsModule struct {
	db          *sql.DB
	bot         *tele.Bot
	logger      *zap.Logger
	statsRepo   *repositories.StatisticsRepository
	moduleRepo  *repositories.ModuleRepository
	eventRepo   *repositories.EventRepository
	userMsgRepo *repositories.UserMessageRepository
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
func New(
	db *sql.DB,
	statsRepo *repositories.StatisticsRepository,
	moduleRepo *repositories.ModuleRepository,
	eventRepo *repositories.EventRepository,
	logger *zap.Logger,
	bot *tele.Bot,
) *StatisticsModule {
	return &StatisticsModule{
		db:          db,
		logger:      logger,
		statsRepo:   statsRepo,
		moduleRepo:  moduleRepo,
		eventRepo:   eventRepo,
		bot:         bot,
		userMsgRepo: repositories.NewUserMessageRepository(db, logger),
	}
}

// SetAdminUsers —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –º–æ–¥—É–ª—è.

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å.
func (m *StatisticsModule) Init(deps core.ModuleDependencies) error {
	m.bot = deps.Bot
	m.logger.Info("statistics module initialized")
	return nil
}

// OnMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
// –†—É—Å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ü—Ä–∏ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏–º —Å—á—ë—Ç—á–∏–∫ –≤ –ë–î.
func (m *StatisticsModule) OnMessage(ctx *core.MessageContext) error {
	if ctx.Message == nil || ctx.Sender == nil {
		m.logger.Warn("statistics: empty message or sender", zap.Any("ctx", ctx))
		return nil
	}

	m.logger.Debug("statistics: received message",
		zap.Int64("chat_id", ctx.Chat.ID),
		zap.Int64("user_id", ctx.Sender.ID),
		zap.String("username", ctx.Sender.Username),
		zap.String("text", ctx.Message.Text),
	)

	contentType := m.detectContentType(ctx.Message)
	m.logger.Debug("statistics: detected content type", zap.String("content_type", contentType))

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (upsert)
	err := m.userMsgRepo.UpsertUser(ctx.Sender.ID, ctx.Sender.Username, ctx.Sender.FirstName)
	if err != nil {
		m.logger.Error("statistics: failed to upsert user",
			zap.Int64("user_id", ctx.Sender.ID),
			zap.String("username", ctx.Sender.Username),
			zap.Error(err))
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	err = m.userMsgRepo.InsertMessage(ctx.Chat.ID, ctx.Sender.ID, ctx.Message.ID, contentType)
	if err != nil {
		m.logger.Error("statistics: failed to insert message",
			zap.Int64("chat_id", ctx.Chat.ID),
			zap.Int64("user_id", ctx.Sender.ID),
			zap.Int("message_id", ctx.Message.ID),
			zap.Error(err))
	}

	err = m.statsRepo.IncrementCounter(ctx.Chat.ID, ctx.Sender.ID, contentType)
	if err != nil {
		m.logger.Error("statistics: failed to increment statistics",
			zap.Int64("chat_id", ctx.Chat.ID),
			zap.Int64("user_id", ctx.Sender.ID),
			zap.String("content_type", contentType),
			zap.Error(err))
		return err
	} else {
		m.logger.Debug("statistics: counter incremented",
			zap.Int64("chat_id", ctx.Chat.ID),
			zap.Int64("user_id", ctx.Sender.ID),
			zap.String("content_type", contentType),
		)
	}

	return nil
}

// detectContentType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
func (m *StatisticsModule) detectContentType(msg *tele.Message) string {
	if msg.Photo != nil {
		return "photo"
	}
	if msg.Video != nil {
		return "video"
	}
	if msg.Sticker != nil {
		return "sticker"
	}
	if msg.Voice != nil {
		return "voice"
	}
	if msg.Document != nil {
		return "document"
	}
	if msg.Audio != nil {
		return "audio"
	}
	if msg.Animation != nil {
		return "animation"
	}
	if msg.VideoNote != nil {
		return "video_note"
	}
	if msg.Location != nil {
		return "location"
	}
	if msg.Contact != nil {
		return "contact"
	}
	if msg.Poll != nil {
		return "poll"
	}
	if msg.Text != "" {
		return "text"
	}
	return "other"
}

// Commands –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –º–æ–¥—É–ª—è.
func (m *StatisticsModule) Commands() []core.BotCommand {
	return []core.BotCommand{
		{Command: "/mystats", Description: "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"},
		{Command: "/myweek", Description: "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é"},
		{Command: "/chatstats", Description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (–∞–¥–º–∏–Ω)"},
		{Command: "/topchat", Description: "–¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)"},
	}
}

// Enabled –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.
func (m *StatisticsModule) Enabled(chatID int64) (bool, error) {
	enabled, err := m.moduleRepo.IsEnabled(chatID, "statistics")
	if err != nil {
		return false, err
	}
	return enabled, nil
}

// Shutdown –≤—ã–ø–æ–ª–Ω—è–µ—Ç graceful shutdown –º–æ–¥—É–ª—è.
func (m *StatisticsModule) Shutdown() error {
	m.logger.Info("shutting down statistics module")
	return nil
}

// RegisterCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è –≤ –±–æ—Ç–µ.
func (m *StatisticsModule) RegisterCommands(bot *tele.Bot) {
	// /mystats ‚Äî –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
	bot.Handle("/mystats", func(c tele.Context) error {
		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏–∑ PostgreSQL
		var today time.Time
		err := m.db.QueryRow("SELECT CURRENT_DATE").Scan(&today)
		if err != nil {
			m.logger.Error("failed to get CURRENT_DATE from PostgreSQL", zap.Error(err))
			today = time.Now().Truncate(24 * time.Hour)
		}
		return m.handleMyStats(c, today)
	})

	// /myweek ‚Äî –ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
	bot.Handle("/myweek", func(c tele.Context) error {
		return m.handleMyWeekStats(c)
	})
}

// RegisterAdminCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã.
func (m *StatisticsModule) RegisterAdminCommands(bot *tele.Bot) {
	// /chatstats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
	bot.Handle("/chatstats", func(c tele.Context) error {
		if !m.isChatAdmin(c) {
			return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		}
		var today time.Time
		err := m.db.QueryRow("SELECT CURRENT_DATE").Scan(&today)
		if err != nil {
			m.logger.Error("failed to get CURRENT_DATE from PostgreSQL", zap.Error(err))
			today = time.Now()
		}
		return m.handleChatStats(c, today)
	})

	// /topchat ‚Äî —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
	bot.Handle("/topchat", func(c tele.Context) error {
		if !m.isChatAdmin(c) {
			return c.Reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
		}
		var today time.Time
		err := m.db.QueryRow("SELECT CURRENT_DATE").Scan(&today)
		if err != nil {
			m.logger.Error("failed to get CURRENT_DATE from PostgreSQL", zap.Error(err))
			today = time.Now()
		}
		return m.handleTopChat(c, today)
	})
}

// handleMyStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /mystats.
func (m *StatisticsModule) handleMyStats(c tele.Context, date time.Time) error {
	chatID := c.Chat().ID
	userID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –≤–∫–ª—é—á—ë–Ω
	enabled, err := m.Enabled(chatID)
	if err != nil {
		m.logger.Error("failed to check if module enabled", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥—É–ª—è.")
	}
	if !enabled {
		return c.Reply("üìä –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å: /enable statistics")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	// –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
	dateOnly := date.Truncate(24 * time.Hour)
	stats, err := m.statsRepo.GetUserStats(userID, chatID, dateOnly)
	if err != nil {
		m.logger.Error("failed to get user stats", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	if stats == nil || stats.TotalCount == 0 {
		return c.Reply(fmt.Sprintf("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ %s", date.Format("02.01.2006")))
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	msg := m.formatUserStats(stats, date)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	_ = m.eventRepo.Log(chatID, userID, "statistics", "view_my_stats", "User viewed personal statistics")

	return c.Reply(msg, &tele.SendOptions{ParseMode: tele.ModeHTML})
}

// handleMyWeekStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /myweek.
func (m *StatisticsModule) handleMyWeekStats(c tele.Context) error {
	chatID := c.Chat().ID
	userID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –≤–∫–ª—é—á—ë–Ω
	enabled, err := m.Enabled(chatID)
	if err != nil {
		m.logger.Error("failed to check if module enabled", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥—É–ª—è.")
	}
	if !enabled {
		return c.Reply("üìä –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å: /enable statistics")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
	stats, err := m.statsRepo.GetUserWeeklyStats(userID, chatID)
	if err != nil {
		m.logger.Error("failed to get user weekly stats", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	if stats == nil || stats.TotalCount == 0 {
		return c.Reply("üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π")
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, –Ω–æ —Å –º–µ—Ç–∫–æ–π "–Ω–µ–¥–µ–ª—è")
	msg := m.formatUserStatsWeekly(stats)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	_ = m.eventRepo.Log(chatID, userID, "statistics", "view_weekly_stats", "User viewed weekly statistics")

	return c.Reply(msg, &tele.SendOptions{ParseMode: tele.ModeHTML})
}

// handleChatStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /chatstats.
func (m *StatisticsModule) handleChatStats(c tele.Context, date time.Time) error {
	chatID := c.Chat().ID
	userID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –≤–∫–ª—é—á—ë–Ω
	enabled, err := m.Enabled(chatID)
	if err != nil {
		m.logger.Error("failed to check if module enabled", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥—É–ª—è.")
	}
	if !enabled {
		return c.Reply("üìä –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å: /enable statistics")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞
	stats, err := m.statsRepo.GetChatStats(chatID, date)
	if err != nil {
		m.logger.Error("failed to get chat stats", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
	}

	if stats == nil || stats.TotalCount == 0 {
		return c.Reply(fmt.Sprintf("üìä –í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ %s", date.Format("02.01.2006")))
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	msg := m.formatChatStats(stats, date)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	_ = m.eventRepo.Log(chatID, userID, "statistics", "view_chat_stats", "Admin viewed chat statistics")

	return c.Reply(msg, &tele.SendOptions{ParseMode: tele.ModeHTML})
}

// handleTopChat –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /topchat.
func (m *StatisticsModule) handleTopChat(c tele.Context, date time.Time) error {
	chatID := c.Chat().ID
	userID := c.Sender().ID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –≤–∫–ª—é—á—ë–Ω
	enabled, err := m.Enabled(chatID)
	if err != nil {
		m.logger.Error("failed to check if module enabled", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –º–æ–¥—É–ª—è.")
	}
	if !enabled {
		return c.Reply("üìä –ú–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ê–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∏—Ç—å: /enable statistics")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	topUsers, err := m.statsRepo.GetTopUsers(chatID, date, 10)
	if err != nil {
		m.logger.Error("failed to get top users", zap.Error(err))
		return c.Reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
	}

	if len(topUsers) == 0 {
		return c.Reply(fmt.Sprintf("üìä –í —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ %s", date.Format("02.01.2006")))
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	msg := m.formatTopUsers(topUsers, date)

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
	_ = m.eventRepo.Log(chatID, userID, "statistics", "view_top_users", "Admin viewed top users")

	return c.Reply(msg, &tele.SendOptions{ParseMode: tele.ModeHTML})
}

// formatUserStats —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (m *StatisticsModule) formatUserStats(stats *repositories.UserDailyStats, date time.Time) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ %s</b>\n\n", date.Format("02.01.2006")))

	if stats.TextCount > 0 {
		sb.WriteString(fmt.Sprintf("üí¨ –¢–µ–∫—Å—Ç: <b>%d</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n", stats.TextCount))
	}
	if stats.PhotoCount > 0 {
		sb.WriteString(fmt.Sprintf("üì∑ –§–æ—Ç–æ: <b>%d</b>\n", stats.PhotoCount))
	}
	if stats.VideoCount > 0 {
		sb.WriteString(fmt.Sprintf("üé• –í–∏–¥–µ–æ: <b>%d</b>\n", stats.VideoCount))
	}
	if stats.StickerCount > 0 {
		sb.WriteString(fmt.Sprintf("üòä –°—Ç–∏–∫–µ—Ä—ã: <b>%d</b>\n", stats.StickerCount))
	}
	if stats.VoiceCount > 0 {
		sb.WriteString(fmt.Sprintf("üé§ –í–æ–π—Å: <b>%d</b>\n", stats.VoiceCount))
	}
	if stats.OtherCount > 0 {
		sb.WriteString(fmt.Sprintf("üìé –ü—Ä–æ—á–µ–µ: <b>%d</b>\n", stats.OtherCount))
	}

	sb.WriteString(fmt.Sprintf("\n<b>–í—Å–µ–≥–æ: %d —Å–æ–æ–±—â–µ–Ω–∏–π</b>", stats.TotalCount))

	return sb.String()
}

// formatUserStatsWeekly —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
func (m *StatisticsModule) formatUserStatsWeekly(stats *repositories.UserDailyStats) string {
	var sb strings.Builder

	sb.WriteString("üìä <b>–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π</b>\n\n")

	if stats.TextCount > 0 {
		sb.WriteString(fmt.Sprintf("üí¨ –¢–µ–∫—Å—Ç: <b>%d</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n", stats.TextCount))
	}
	if stats.PhotoCount > 0 {
		sb.WriteString(fmt.Sprintf("üì∑ –§–æ—Ç–æ: <b>%d</b>\n", stats.PhotoCount))
	}
	if stats.VideoCount > 0 {
		sb.WriteString(fmt.Sprintf("üé• –í–∏–¥–µ–æ: <b>%d</b>\n", stats.VideoCount))
	}
	if stats.StickerCount > 0 {
		sb.WriteString(fmt.Sprintf("üòä –°—Ç–∏–∫–µ—Ä—ã: <b>%d</b>\n", stats.StickerCount))
	}
	if stats.VoiceCount > 0 {
		sb.WriteString(fmt.Sprintf("üé§ –í–æ–π—Å: <b>%d</b>\n", stats.VoiceCount))
	}
	if stats.OtherCount > 0 {
		sb.WriteString(fmt.Sprintf("üìé –ü—Ä–æ—á–µ–µ: <b>%d</b>\n", stats.OtherCount))
	}

	sb.WriteString(fmt.Sprintf("\n<b>–í—Å–µ–≥–æ: %d —Å–æ–æ–±—â–µ–Ω–∏–π</b>", stats.TotalCount))

	return sb.String()
}

// formatChatStats —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞.
func (m *StatisticsModule) formatChatStats(stats *repositories.ChatDailyStats, date time.Time) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞ –∑–∞ %s</b>\n\n", date.Format("02.01.2006")))

	if stats.TextCount > 0 {
		sb.WriteString(fmt.Sprintf("üí¨ –¢–µ–∫—Å—Ç: <b>%d</b> —Å–æ–æ–±—â–µ–Ω–∏–π\n", stats.TextCount))
	}
	if stats.PhotoCount > 0 {
		sb.WriteString(fmt.Sprintf("üì∑ –§–æ—Ç–æ: <b>%d</b>\n", stats.PhotoCount))
	}
	if stats.VideoCount > 0 {
		sb.WriteString(fmt.Sprintf("üé• –í–∏–¥–µ–æ: <b>%d</b>\n", stats.VideoCount))
	}
	if stats.StickerCount > 0 {
		sb.WriteString(fmt.Sprintf("üòä –°—Ç–∏–∫–µ—Ä—ã: <b>%d</b>\n", stats.StickerCount))
	}
	if stats.VoiceCount > 0 {
		sb.WriteString(fmt.Sprintf("üé§ –í–æ–π—Å: <b>%d</b>\n", stats.VoiceCount))
	}
	if stats.OtherCount > 0 {
		sb.WriteString(fmt.Sprintf("üìé –ü—Ä–æ—á–µ–µ: <b>%d</b>\n", stats.OtherCount))
	}

	sb.WriteString(fmt.Sprintf("\n<b>–í—Å–µ–≥–æ: %d —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n", stats.TotalCount))
	sb.WriteString(fmt.Sprintf("üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>%d</b>", stats.UserCount))

	return sb.String()
}

// formatTopUsers —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
func (m *StatisticsModule) formatTopUsers(topUsers []repositories.TopUser, date time.Time) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üèÜ <b>–¢–æ–ø-10 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ %s</b>\n\n", date.Format("02.01.2006")))

	medals := []string{"ü•á", "ü•à", "ü•â"}

	for i, user := range topUsers {
		medal := ""
		if i < 3 {
			medal = medals[i] + " "
		} else {
			medal = fmt.Sprintf("%d. ", i+1)
		}

		displayName := user.FirstName
		if user.Username != "" {
			displayName = "@" + user.Username
		}

		sb.WriteString(fmt.Sprintf("%s<b>%s</b>: %d —Å–æ–æ–±—â–µ–Ω–∏–π\n", medal, displayName, user.MessageCount))
	}

	return sb.String()
}

// isChatAdmin –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —á–∞—Ç–∞ –≤ Telegram.
func (m *StatisticsModule) isChatAdmin(c tele.Context) bool {
	if c.Chat().Type == tele.ChatPrivate {
		return true // –í –ª–∏—á–∫–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã
	}

	admins, err := m.bot.AdminsOf(c.Chat())
	if err != nil {
		m.logger.Error("failed to get chat admins", zap.Error(err))
		return false
	}

	for _, admin := range admins {
		if admin.User.ID == c.Sender().ID {
			return true
		}
	}

	return false
}
