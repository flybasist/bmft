package main

import (
	"context"
	"database/sql"
	"fmt"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "github.com/lib/pq" // PostgreSQL driver
	"go.uber.org/zap"
	tele "gopkg.in/telebot.v3"

	"github.com/flybasist/bmft/internal/config"
	"github.com/flybasist/bmft/internal/core"
	"github.com/flybasist/bmft/internal/logx"
	"github.com/flybasist/bmft/internal/migrations"
	"github.com/flybasist/bmft/internal/modules/limiter"
	"github.com/flybasist/bmft/internal/modules/reactions"
	"github.com/flybasist/bmft/internal/modules/scheduler"
	"github.com/flybasist/bmft/internal/modules/statistics"
	"github.com/flybasist/bmft/internal/postgresql"
	"github.com/flybasist/bmft/internal/postgresql/repositories"
)

func main() {
	// –†—É—Å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞.
	// 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
	// 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–≥–µ—Ä
	// 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	// 4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (001_initial_schema.sql)
	// 5. –°–æ–∑–¥–∞—ë–º telebot.v3 –±–æ—Ç–∞ —Å Long Polling
	// 6. –°–æ–∑–¥–∞—ë–º Module Registry
	// 7. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ (limiter, reactions, statistics, scheduler)
	// 8. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
	// 9. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
	// 10. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	// 11. –ñ–¥—ë–º SIGINT/SIGTERM –¥–ª—è graceful shutdown

	if err := run(); err != nil {
		fmt.Fprintf(os.Stderr, "fatal error: %v\n", err)
		os.Exit(1)
	}
}

func run() error {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
	cfg, err := config.Load()
	if err != nil {
		return fmt.Errorf("failed to load config: %w", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º structured logger (zap)
	logger, err := logx.NewLogger(cfg.LogLevel, cfg.LogPretty)
	if err != nil {
		return fmt.Errorf("failed to init logger: %w", err)
	}
	defer logger.Sync()

	logger.Info("starting bmft bot",
		zap.String("log_level", cfg.LogLevel),
		zap.Bool("log_pretty", cfg.LogPretty),
		zap.Duration("shutdown_timeout", cfg.ShutdownTimeout),
		zap.Int("polling_timeout", cfg.PollingTimeout),
	)

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
	db, err := sql.Open("postgres", cfg.PostgresDSN)
	if err != nil {
		return fmt.Errorf("failed to connect to postgres: %w", err)
	}
	defer db.Close()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := postgresql.PingWithRetry(db, 10, 2*time.Second, logger); err != nil {
		return fmt.Errorf("failed to ping postgres: %w", err)
	}
	logger.Info("connected to postgresql")

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (–∏–ª–∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ö–µ–º—É)
	if err := migrations.RunMigrationsIfNeeded(db, logger); err != nil {
		return fmt.Errorf("database migration failed: %w", err)
	}
	logger.Info("database schema ready")

	// –°–æ–∑–¥–∞—ë–º telebot.v3 –±–æ—Ç–∞ —Å Long Polling
	pref := tele.Settings{
		Token:  cfg.TelegramBotToken,
		Poller: &tele.LongPoller{Timeout: time.Duration(cfg.PollingTimeout) * time.Second},
	}
	bot, err := tele.NewBot(pref)
	if err != nil {
		return fmt.Errorf("failed to create bot: %w", err)
	}

	logger.Info("bot created successfully",
		zap.String("bot_username", bot.Me.Username),
		zap.Int64("bot_id", bot.Me.ID),
	)

	// –°–æ–∑–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –º–æ–¥—É–ª–µ–π (DI –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä)
	deps := core.ModuleDependencies{
		DB:     db,
		Bot:    bot,
		Logger: logger,
		Config: cfg,
	}

	// –°–æ–∑–¥–∞—ë–º Module Registry
	registry := core.NewRegistry(deps)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
	if err := registry.InitAll(); err != nil {
		return fmt.Errorf("failed to init modules: %w", err)
	}

	// –°–æ–∑–¥–∞—ë–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö
	chatRepo := repositories.NewChatRepository(db)
	moduleRepo := repositories.NewModuleRepository(db)
	eventRepo := repositories.NewEventRepository(db)
	limitRepo := repositories.NewLimitRepository(db, logger)

	// –°–æ–∑–¥–∞—ë–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ª–∏–º–∏—Ç–æ–≤
	limiterModule := limiter.New(limitRepo, logger)
	// TODO: –ó–∞–≥—Ä—É–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
	adminUsers := []int64{} // –ü–æ–∫–∞ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Ç–æ–º
	limiterModule.SetAdminUsers(adminUsers)

	registry.Register("limiter", limiterModule)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è –ª–∏–º–∏—Ç–æ–≤
	limiterModule.RegisterCommands(bot)
	limiterModule.RegisterAdminCommands(bot)

	// –°–æ–∑–¥–∞—ë–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Ä–µ–∞–∫—Ü–∏–π (Phase 3)
	reactionsModule := reactions.New(db, moduleRepo, eventRepo, logger)
	reactionsModule.SetAdminUsers(adminUsers)

	registry.Register("reactions", reactionsModule)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è —Ä–µ–∞–∫—Ü–∏–π
	reactionsModule.RegisterAdminCommands(bot)

	// –°–æ–∑–¥–∞—ë–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (Phase 4)
	statsRepo := repositories.NewStatisticsRepository(db, logger)
	statisticsModule := statistics.New(db, statsRepo, moduleRepo, eventRepo, logger)
	statisticsModule.SetAdminUsers(adminUsers)

	registry.Register("statistics", statisticsModule)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	statisticsModule.RegisterCommands(bot)
	statisticsModule.RegisterAdminCommands(bot)

	// –°–æ–∑–¥–∞—ë–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (Phase 5)
	schedulerRepo := repositories.NewSchedulerRepository(db, logger)
	schedulerModule := scheduler.New(db, schedulerRepo, moduleRepo, eventRepo, logger)
	schedulerModule.SetAdminUsers(adminUsers)

	registry.Register("scheduler", schedulerModule)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
	schedulerModule.RegisterCommands(bot)
	schedulerModule.RegisterAdminCommands(bot)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
	bot.Use(core.LoggerMiddleware(logger))
	bot.Use(core.PanicRecoveryMiddleware(logger))
	bot.Use(core.RateLimitMiddleware(logger))

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
	registerCommands(bot, registry, chatRepo, moduleRepo, eventRepo, logger, db)

	// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –°–ª—É—à–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		logger.Info("bot started, polling for updates...")
		bot.Start()
	}()

	// –ñ–¥—ë–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
	sig := <-sigChan
	logger.Info("received shutdown signal", zap.String("signal", sig.String()))

	// Graceful shutdown
	shutdownCtx, shutdownCancel := context.WithTimeout(ctx, cfg.ShutdownTimeout)
	defer shutdownCancel()

	logger.Info("shutting down bot...")
	bot.Stop()

	logger.Info("shutting down modules...")
	if err := registry.ShutdownAll(); err != nil {
		logger.Error("failed to shutdown modules", zap.Error(err))
	}

	logger.Info("closing database connection...")
	if err := db.Close(); err != nil {
		logger.Error("failed to close database", zap.Error(err))
	}

	select {
	case <-shutdownCtx.Done():
		logger.Warn("shutdown timeout exceeded")
		return fmt.Errorf("shutdown timeout exceeded")
	default:
		logger.Info("bot shutdown complete")
		return nil
	}
}

// registerCommands —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.
// –†—É—Å—Å–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥: /start, /help, /modules, /enable, /disable.
func registerCommands(
	bot *tele.Bot,
	registry *core.ModuleRegistry,
	chatRepo *repositories.ChatRepository,
	moduleRepo *repositories.ModuleRepository,
	eventRepo *repositories.EventRepository,
	logger *zap.Logger,
	db *sql.DB,
) {
	// /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	bot.Handle("/start", func(c tele.Context) error {
		logger.Info("handling /start command",
			zap.Int64("chat_id", c.Chat().ID),
			zap.Int64("user_id", c.Sender().ID),
		)

		// –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —á–∞—Ç–∞ –≤ –ë–î
		chatType := string(c.Chat().Type)
		title := c.Chat().Title
		username := c.Chat().Username
		if err := chatRepo.GetOrCreate(c.Chat().ID, chatType, title, username); err != nil {
			logger.Error("failed to create chat", zap.Error(err))
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —á–∞—Ç–∞.")
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
		_ = eventRepo.Log(c.Chat().ID, c.Sender().ID, "core", "start_command", "User started bot")

		welcomeMsg := `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø BMFT ‚Äî –º–æ–¥—É–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram-—á–∞—Ç–∞–º–∏.

üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
/modules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
/enable <module> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)
/disable <module> ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)

–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏!`

		return c.Send(welcomeMsg)
	})

	// /help ‚Äî –ø–æ–º–æ—â—å
	bot.Handle("/help", func(c tele.Context) error {
		logger.Info("handling /help command",
			zap.Int64("chat_id", c.Chat().ID),
			zap.Int64("user_id", c.Sender().ID),
		)

		helpMsg := `üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ:
/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîπ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã):
/modules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏
/enable <module> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
/disable <module> ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å

üîπ –ú–æ–¥—É–ª–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Phase 2-6:
- limiter ‚Äî –ª–∏–º–∏—Ç—ã –Ω–∞ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
- reactions ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
- statistics ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞
- scheduler ‚Äî –∑–∞–¥–∞—á–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
- antispam ‚Äî –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä—ã`

		return c.Send(helpMsg)
	})

	// /modules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
	bot.Handle("/modules", func(c tele.Context) error {
		logger.Info("handling /modules command",
			zap.Int64("chat_id", c.Chat().ID),
			zap.Int64("user_id", c.Sender().ID),
		)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø)
		if c.Chat().Type == tele.ChatGroup || c.Chat().Type == tele.ChatSuperGroup {
			admins, err := bot.AdminsOf(c.Chat())
			if err != nil {
				logger.Error("failed to get admins", zap.Error(err))
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
			}

			isAdmin := false
			for _, admin := range admins {
				if admin.User.ID == c.Sender().ID {
					isAdmin = true
					break
				}
			}

			if !isAdmin {
				return c.Send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
			}
		}

		modules := registry.GetModules()
		if len(modules) == 0 {
			return c.Send("üì¶ –ú–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ë—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ Phase 2-6.")
		}

		msg := "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:\n\n"
		for name, commands := range modules {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–¥—É–ª—å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
			enabled, _ := moduleRepo.IsEnabled(c.Chat().ID, name)
			status := "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
			if enabled {
				status = "‚úÖ –í–∫–ª—é—á–µ–Ω"
			}

			msg += fmt.Sprintf("üîπ **%s** ‚Äî %s\n", name, status)
			if len(commands) > 0 {
				msg += "  –ö–æ–º–∞–Ω–¥—ã: "
				for i, cmd := range commands {
					if i > 0 {
						msg += ", "
					}
					msg += cmd.Command
				}
				msg += "\n"
			}
			msg += "\n"
		}

		return c.Send(msg)
	})

	// /enable <module> ‚Äî –≤–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
	bot.Handle("/enable", func(c tele.Context) error {
		args := c.Args()
		if len(args) == 0 {
			return c.Send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enable <module_name>")
		}

		moduleName := args[0]

		logger.Info("handling /enable command",
			zap.Int64("chat_id", c.Chat().ID),
			zap.Int64("user_id", c.Sender().ID),
			zap.String("module", moduleName),
		)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
		if c.Chat().Type == tele.ChatGroup || c.Chat().Type == tele.ChatSuperGroup {
			admins, err := bot.AdminsOf(c.Chat())
			if err != nil {
				logger.Error("failed to get admins", zap.Error(err))
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
			}

			isAdmin := false
			for _, admin := range admins {
				if admin.User.ID == c.Sender().ID {
					isAdmin = true
					break
				}
			}

			if !isAdmin {
				return c.Send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–¥—É–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
		if _, exists := registry.GetModule(moduleName); !exists {
			return c.Send(fmt.Sprintf("‚ùå –ú–æ–¥—É–ª—å '%s' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /modules –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.", moduleName))
		}

		// –í–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å
		if err := moduleRepo.Enable(c.Chat().ID, moduleName); err != nil {
			logger.Error("failed to enable module", zap.Error(err))
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è.")
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
		_ = eventRepo.Log(c.Chat().ID, c.Sender().ID, "core", "module_enabled", fmt.Sprintf("Module %s enabled", moduleName))

		return c.Send(fmt.Sprintf("‚úÖ –ú–æ–¥—É–ª—å '%s' –≤–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.", moduleName))
	})

	// /disable <module> ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å
	bot.Handle("/disable", func(c tele.Context) error {
		args := c.Args()
		if len(args) == 0 {
			return c.Send("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disable <module_name>")
		}

		moduleName := args[0]

		logger.Info("handling /disable command",
			zap.Int64("chat_id", c.Chat().ID),
			zap.Int64("user_id", c.Sender().ID),
			zap.String("module", moduleName),
		)

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
		if c.Chat().Type == tele.ChatGroup || c.Chat().Type == tele.ChatSuperGroup {
			admins, err := bot.AdminsOf(c.Chat())
			if err != nil {
				logger.Error("failed to get admins", zap.Error(err))
				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
			}

			isAdmin := false
			for _, admin := range admins {
				if admin.User.ID == c.Sender().ID {
					isAdmin = true
					break
				}
			}

			if !isAdmin {
				return c.Send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —á–∞—Ç–∞.")
			}
		}

		// –í—ã–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å
		if err := moduleRepo.Disable(c.Chat().ID, moduleName); err != nil {
			logger.Error("failed to disable module", zap.Error(err))
			return c.Send("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –º–æ–¥—É–ª—è.")
		}

		// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
		_ = eventRepo.Log(c.Chat().ID, c.Sender().ID, "core", "module_disabled", fmt.Sprintf("Module %s disabled", moduleName))

		return c.Send(fmt.Sprintf("‚ùå –ú–æ–¥—É–ª—å '%s' –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.", moduleName))
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –º–æ–¥—É–ª—è–º
	bot.Handle(tele.OnText, func(c tele.Context) error {
		// –°–æ–∑–¥–∞—ë–º MessageContext –¥–ª—è –º–æ–¥—É–ª–µ–π
		ctx := &core.MessageContext{
			Message: c.Message(),
			Bot:     bot,
			DB:      db,
			Logger:  logger,
			Chat:    c.Chat(),
			Sender:  c.Sender(),
		}

		// –ü–µ—Ä–µ–¥–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –º–æ–¥—É–ª—è–º
		if err := registry.OnMessage(ctx); err != nil {
			logger.Error("failed to process message in modules", zap.Error(err))
		}

		return nil
	})
}
